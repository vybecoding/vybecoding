#!/bin/bash

# Visual Verification Test Runner
# This script runs all visual comparison tests and generates a comprehensive report

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

echo "🎨 Visual Verification Test Suite"
echo "================================="
echo ""

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if servers are running
check_server() {
    local port=$1
    local name=$2
    if nc -z localhost $port 2>/dev/null; then
        echo -e "${GREEN}✓${NC} $name server is running on port $port"
        return 0
    else
        echo -e "${RED}✗${NC} $name server is not running on port $port"
        return 1
    fi
}

# Start servers if needed
echo "Checking servers..."
SERVERS_OK=true

if ! check_server 3000 "Next.js"; then
    echo "Starting Next.js server..."
    cd ../.. && npm run dev &
    NEXTJS_PID=$!
    sleep 10
fi

if ! check_server 8080 "Demo"; then
    echo "Starting Demo server..."
    cd ../../demo && python3 -m http.server 8080 &
    DEMO_PID=$!
    sleep 5
fi

echo ""

# Create reports directory
mkdir -p reports/screenshots

# Run tests by priority
echo "Running visual verification tests..."
echo ""

# Priority order tests
PRIORITY_TESTS=(
    "01-landing-page.spec.ts"
    "02-navigation.spec.ts"
    "03-apps-browse.spec.ts"
    "04-guides-browse.spec.ts"
    "05-auth-pages.spec.ts"
    "06-dashboard.spec.ts"
    "07-profile-pages.spec.ts"
    "08-content-creation.spec.ts"
)

# Run individual test files and capture results
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0
FAILED_FILES=()

for test_file in "${PRIORITY_TESTS[@]}"; do
    echo -e "${YELLOW}Running:${NC} $test_file"
    
    if npx playwright test tests/$test_file --config=playwright.config.ts --reporter=json > reports/${test_file%.spec.ts}-results.json 2>&1; then
        echo -e "${GREEN}✓ Passed${NC}"
        ((PASSED_TESTS++))
    else
        echo -e "${RED}✗ Failed${NC}"
        ((FAILED_TESTS++))
        FAILED_FILES+=("$test_file")
    fi
    ((TOTAL_TESTS++))
    echo ""
done

# Generate summary report
echo "Generating summary report..."

cat > reports/summary.md << EOF
# Visual Verification Test Summary

**Date:** $(date)
**Total Tests Run:** $TOTAL_TESTS
**Passed:** $PASSED_TESTS
**Failed:** $FAILED_TESTS
**Success Rate:** $(awk "BEGIN {printf \"%.2f\", ($PASSED_TESTS/$TOTAL_TESTS)*100}")%

## Test Results by Page

| Page | Status | Notes |
|------|--------|-------|
EOF

for test_file in "${PRIORITY_TESTS[@]}"; do
    test_name=$(echo $test_file | sed 's/[0-9]*-//g' | sed 's/.spec.ts//g' | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
    if [[ " ${FAILED_FILES[@]} " =~ " ${test_file} " ]]; then
        echo "| $test_name | ❌ Failed | Check reports/${test_file%.spec.ts}-results.json |" >> reports/summary.md
    else
        echo "| $test_name | ✅ Passed | All visual tests passed |" >> reports/summary.md
    fi
done

cat >> reports/summary.md << EOF

## Failed Tests Details

EOF

if [ ${#FAILED_FILES[@]} -gt 0 ]; then
    for failed_file in "${FAILED_FILES[@]}"; do
        echo "### $failed_file" >> reports/summary.md
        echo "" >> reports/summary.md
        echo "See detailed results in: reports/${failed_file%.spec.ts}-results.json" >> reports/summary.md
        echo "" >> reports/summary.md
    done
else
    echo "No failed tests! 🎉" >> reports/summary.md
fi

cat >> reports/summary.md << EOF

## Migration Progress Indicators

Based on the visual verification results:

- **Visual Fidelity**: $(awk "BEGIN {printf \"%.1f\", ($PASSED_TESTS/$TOTAL_TESTS)*100}")%
- **Component Coverage**: $PASSED_TESTS/$TOTAL_TESTS pages verified
- **Responsive Design**: Tested at 375px, 768px, 1440px breakpoints

## Next Steps

1. Review failed tests and their screenshots
2. Fix visual discrepancies in the Next.js implementation
3. Re-run failed tests after fixes
4. Update component documentation

## Screenshot Artifacts

All visual comparison screenshots are saved in: \`reports/screenshots/\`

---

Generated by Visual Verification Test Suite
EOF

# Generate HTML report
npx playwright show-report reports/html || true

echo ""
echo "================================="
echo "Test Summary:"
echo "================================="
echo -e "Total: $TOTAL_TESTS"
echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}"
echo -e "Failed: ${RED}$FAILED_TESTS${NC}"
echo -e "Success Rate: $(awk "BEGIN {printf \"%.2f\", ($PASSED_TESTS/$TOTAL_TESTS)*100}")%"
echo ""
echo "Reports generated:"
echo "- Summary: reports/summary.md"
echo "- HTML Report: reports/html/index.html"
echo "- Screenshots: reports/screenshots/"
echo ""

# Cleanup
if [ ! -z "$NEXTJS_PID" ]; then
    echo "Stopping Next.js server..."
    kill $NEXTJS_PID 2>/dev/null || true
fi

if [ ! -z "$DEMO_PID" ]; then
    echo "Stopping Demo server..."
    kill $DEMO_PID 2>/dev/null || true
fi

# Exit with appropriate code
if [ $FAILED_TESTS -gt 0 ]; then
    echo -e "${RED}Visual verification failed. Please review the failed tests.${NC}"
    exit 1
else
    echo -e "${GREEN}All visual verification tests passed! 🎉${NC}"
    exit 0
fi